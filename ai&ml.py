# -*- coding: utf-8 -*-
"""AI&ML

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1qBtply5xo_OPvhg_Y3iYtdAsaJe-hnDI
"""

import pandas as pd #atabular
import numpy as np #Matriks
import matplotlib.pyplot


data =pd.read_csv  ('/Student Depression Dataset.csv')

data.shape

data

"""# Eksplorasi data"""

# prompt: make visualisasi perbandingan jumlah laki2 dan perempuan

import pandas as pd #atabular
import numpy as np #Matriks
import matplotlib.pyplot as plt


# Menghitung jumlah laki-laki dan perempuan
gender_counts = data['Gender'].value_counts()

# Membuat visualisasi
plt.figure(figsize=(8, 6))
plt.bar(gender_counts.index, gender_counts.values, color=['blue', 'pink'])
plt.title('Perbandingan Jumlah Laki-laki dan Perempuan')
plt.xlabel('Jenis Kelamin')
plt.ylabel('Jumlah')
plt.show()

#Checking missing value
data.isnull().sum()

#Hasil akan menampilkan jumlah missing value tiap kolom pada label

#Checking duplicated value
data.duplicated().sum()

#Hasil akan menampilkan jumlah duplicated value tiap kolom pada label

#checking data types
data.dtypes

#Jika string pakai mode
#Jika int, float pakai mean

"""# Data Cleanning"""

#Handling missing values
#Mean
data['Financial Stress'] = data['Financial Stress'].fillna(data['Financial Stress'].mean())

#Checking missing value
data.isnull().sum()

#Hasil akan menampilkan jumlah missing value tiap kolom pada label

"""# Data Transformasi"""

pd.value_counts(data.Gender)

map_gender = dict(zip(set(data['Gender']),[0,1]))
data['Gender'] = data['Gender'].apply(lambda x:map_gender[x])
print(map_gender)

pd.value_counts(data.City)

pd.value_counts(data.Profession)

map_profession = dict(zip(set(data['Profession']),[0,1,2,3,4,5,6,7,8,9,10,11,12,13]))
data['Profession'] = data['Profession'].apply(lambda x:map_profession[x])
print(map_profession)

pd.value_counts(data['Sleep Duration'])

map_Sleep_Duration = dict(zip(set(data['Sleep Duration']),[0,1,2,3,4]))
data['Sleep Duration'] = data['Sleep Duration'].apply(lambda x:map_Sleep_Duration[x])
print(map_Sleep_Duration)

pd.value_counts(data['Dietary Habits'])

map_Dietary_Habits = dict(zip(set(data['Dietary Habits']),[0,1,2,3]))
data['Dietary Habits'] = data['Dietary Habits'].apply(lambda x:map_Dietary_Habits[x])
print(map_Dietary_Habits)

pd.value_counts(data['Have you ever had suicidal thoughts ?'])

map_suicidal = dict(zip(set(data['Have you ever had suicidal thoughts ?']),[0,1]))
data['Have you ever had suicidal thoughts ?'] = data['Have you ever had suicidal thoughts ?'].apply(lambda x:map_suicidal[x])
print(map_suicidal)

pd.value_counts(data['Family History of Mental Illness'])

map_suicidal = dict(zip(set(data['Family History of Mental Illness']),[0,1]))
data['Family History of Mental Illness'] = data['Family History of Mental Illness'].apply(lambda x:map_suicidal[x])
print(map_suicidal)

pd.value_counts(data['Work Pressure'])

data.head()

"""# Data Selection"""

data.drop('id', axis=1, inplace=True)

data.drop('City', axis=1, inplace=True)

data.drop('Degree', axis=1, inplace=True)

data.head()

#Memisahkan label (Depression) dari tabel
y = data.pop('Depression')

data.shape

y.head()

"""# Model Selection"""

#library pembagian data set metode-1
from sklearn.model_selection import train_test_split

x_train_oversample, x_test_oversample, y_train_oversample, y_test_oversample = train_test_split(data, y, test_size =0.10, random_state=1)

print("Ukuran x_train :", x_train_oversample.shape)
print("Ukuran y_train :", y_train_oversample.shape)
print("Ukuran x_test :", x_test_oversample.shape)
print("Ukuran y_test :", y_test_oversample.shape)

x_train_oversample

"""#Naive Byes"""

from sklearn.naive_bayes import GaussianNB

# Inisialisasi model Naive Bayes
model = GaussianNB()

# Latihan Model
model = model.fit(x_train_oversample, y_train_oversample)

# Prediksi pada data uji
prediksi = model.predict(x_test_oversample)

prediksi1 = pd.DataFrame(prediksi)
prediksi1.columns = ['hasil prediksi']

print(prediksi1)

data9 = pd.DataFrame(y_test_oversample)
print(data9)

from sklearn.metrics import confusion_matrix
confusion_matrix(y_test_oversample, prediksi)

from sklearn.metrics import accuracy_score
accuracy_score(y_test_oversample, prediksi)

"""#SVM"""

from sklearn.svm import SVC

#Inisialisasi model SVM
model = SVC()
#model pelatihan algoritma SVM
model = model.fit(x_train_oversample, y_train_oversample)

#Predikasi pada data uji
prediksi = model.predict(x_test_oversample)

prediksi1 = pd.DataFrame(prediksi)
prediksi1.columns = ['hasil prediksi']
print(prediksi1)

data9 = pd.DataFrame(y_test_oversample)
print(data9)

from sklearn.metrics import confusion_matrix
confusion_matrix(y_test_oversample, prediksi)

from sklearn.metrics import accuracy_score
accuracy_score(y_test_oversample, prediksi)

"""#KNN"""

from sklearn.neighbors import KNeighborsClassifier

# Inisialisasi model KNN
model = KNeighborsClassifier(n_neighbors=3)

# Latih model KNN
model = model.fit(x_train_oversample, y_train_oversample)

#Predikasi pada data uji
prediksi = model.predict(x_test_oversample)

prediksi1 = pd.DataFrame(prediksi)
prediksi1.columns = ['hasil prediksi']
print(prediksi1)

from sklearn.metrics import confusion_matrix
confusion_matrix(y_test_oversample, prediksi)

from sklearn.metrics import accuracy_score
accuracy_score(y_test_oversample, prediksi)

"""#Random Forest"""

from sklearn.ensemble import RandomForestClassifier

# Inisialisasi model Random Forest
model = RandomForestClassifier(n_estimators=100, random_state=42)

# Prediksi pada data uji
model = model.fit(x_train_oversample, y_train_oversample)

# Prediksi pada data uji
prediksi = model.predict(x_test_oversample)

prediksi1 = pd.DataFrame(prediksi)
prediksi1.columns = ['hasil prediksi']
print(prediksi1)

data9 = pd.DataFrame(y_test_oversample)
print(data9)

from sklearn.metrics import confusion_matrix
confusion_matrix(y_test_oversample, prediksi)

from sklearn.metrics import confusion_matrix
confusion_matrix(y_test_oversample, prediksi)

from sklearn.metrics import accuracy_score
accuracy_score(y_test_oversample, prediksi)

"""# Decision Tree"""

#proses pelatihan decision tree sklearn
from sklearn import tree

#Inisialisasi model DT
model = tree.DecisionTreeClassifier()

#model pelatihan algoritma DT
model = model.fit(x_train_oversample, y_train_oversample)

#proses pengujian
prediksi = model.predict(x_test_oversample)

"""Build Model Klasisfikasi DT"""

prediksi1 = pd.DataFrame(prediksi)
prediksi1.columns = ['hasil prediksi']
print(prediksi1)

data9 = pd.DataFrame(y_test_oversample)
print(data9)

from sklearn.metrics import confusion_matrix
confusion_matrix(y_test_oversample, prediksi)

from sklearn.metrics import accuracy_score
accuracy_score(y_test_oversample, prediksi)